#define EXCEPTION_STACK_SIZE 72

/* ========================================================= [ entry ] === */
  .section .init
reset_handler:

  /* MSTATUS:0x00001800,  MTVEC  :0x00000011*/
  addi x1, x0, 0x180  
  slli x1, x1, 4
  csrrw  x1, mstatus, x1 
  csrrwi x1, mtvec, 0x11

  /* PLA configuration loading */
  la x5, config_mem_words
  cflc0 0(x5)
  cflc1 4(x5)
  cflc2 8(x5)
  cflc3 12(x5)
  cflc4 16(x5)
  cflc5 20(x5)
  cflc6 24(x5)
  cflc7 28(x5)
  cflc8 32(x5)
  cflc9 36(x5)

  /* set all registers to zero */
  mv  x1, x0
  mv  x2, x1
  mv  x3, x1
  mv  x4, x1
  mv  x5, x1
  mv  x6, x1
  mv  x7, x1
  mv  x8, x1
  mv  x9, x1
  mv x10, x1
  mv x11, x1
  mv x12, x1
  mv x13, x1
  mv x14, x1
  mv x15, x1
  mv x16, x1
  mv x17, x1
  mv x18, x1
  mv x19, x1
  mv x20, x1
  mv x21, x1
  mv x22, x1
  mv x23, x1
  mv x24, x1
  mv x25, x1
  mv x26, x1
  mv x27, x1
  mv x28, x1
  mv x29, x1
  mv x30, x1
  mv x31, x1

  /* stack initilization */
  la   x2, _stack_start

_start:
  .global _start

  /* clear BSS */
  la x26, _bss_start
  la x27, _bss_end

  bge x26, x27, zero_loop_end

zero_loop:
  sw x0, 0(x26)
  addi x26, x26, 4
  ble x26, x27, zero_loop
zero_loop_end:

main_entry:
  /* jump to main program entry point (argc = argv = 0) */
  addi x10, x0, 0
  addi x11, x0, 0
  la x1, _end
  la x6, main
  addi x7, x0, 3 
  slli x7, x7, 11
  csrrw x0, mepc, x6
  csrrc x7, mstatus, x7
  
  // enable all external interrupt, modified Luca
  addi x7, x0, 0
  lui x7, 0xffff0
  csrrs x7, mie, x7
  
  addi x6, x0, 0
  addi x7, x0, 0
  mret

_end:
  /* when returning from main, infinite loop here */
  jal x0, _end

// saves all caller-saved registers (except return address)
store_regs:
  sw  x3, 0x00(x2)  // gp
  sw  x4, 0x04(x2)  // tp
  sw  x5, 0x08(x2)  // t0
  sw  x6, 0x0c(x2)  // t1
  sw  x7, 0x10(x2)  // t2
  sw x10, 0x14(x2)  // a0
  sw x11, 0x18(x2)  // a1
  sw x12, 0x1c(x2)  // a2
  sw x13, 0x20(x2)  // a3
  sw x14, 0x24(x2)  // a4
  sw x15, 0x28(x2)  // a5
  sw x16, 0x2c(x2)  // a6
  sw x17, 0x30(x2)  // a7
  sw x28, 0x34(x2)  // t3
  sw x29, 0x38(x2)  // t4
  sw x30, 0x3c(x2)  // t5
  sw x31, 0x40(x2)  // t6
  jalr x0, x1

// load back registers from stack
end_except:
  lw  x3, 0x00(x2)
  lw  x4, 0x04(x2)
  lw  x5, 0x08(x2)
  lw  x6, 0x0c(x2)
  lw  x7, 0x10(x2)
  lw x10, 0x14(x2)
  lw x11, 0x18(x2)
  lw x12, 0x1c(x2)
  lw x13, 0x20(x2)
  lw x14, 0x24(x2)
  lw x15, 0x28(x2)
  lw x16, 0x2c(x2)
  lw x17, 0x30(x2)
  lw x28, 0x34(x2)
  lw x29, 0x38(x2)
  lw x30, 0x3c(x2)
  lw x31, 0x40(x2)
  lw  x1, 0x44(x2)
  addi x2, x2, EXCEPTION_STACK_SIZE
  mret
  #j default_exc_handler

/* exception codes to be implemented with custom behavior */

/* ================================= [ instruction address misaligned handler] === */

instruction_address_misaligned_handler:
  j instruction_address_misaligned_handler
  #addi x2, x2, -EXCEPTION_STACK_SIZE
  #sw x1, 0x44(x2)
  #jal x1, store_regs
  #j end_except
  # la x1, end_except
  # jal x0, instruction_access_misaligned_handler_c

/* ================================= [ illegal instruction handler] === */

illegal_insn_handler:
  j illegal_insn_handler
  #addi x2, x2, -EXCEPTION_STACK_SIZE
  #sw x1, 0x44(x2)
  #jal x1, store_regs
  #j end_except
  # la x1, end_except
  # jal x0, illegal_insn_handler_c

/* ================================= [ ecall user instruction handler] === */
/* ecall trap will continue the main program in user mode, trap code to be implemented */

ecall_u_handler:
  addi x2, x2, -EXCEPTION_STACK_SIZE
  sw x1, 0x44(x2)
  jal x1, store_regs
  
  /* mepc+4 allows mret to continue the program after a ecall, added Luca */
  csrrsi x7, mepc, 0
  addi x7,x7,4
  csrrw x7,mepc,x7
  
  j end_except
  # la x1, end_except
  # jal x0, ecall_u_handler_c

/* ================================= [ external interrupt signal handler] === */
/* interrupt handler will resume (machine mode only) the main program, interrupt code to be implemented */

external_interrupt_signal_handler:
  addi x2, x2, -EXCEPTION_STACK_SIZE
  sw x1, 0x44(x2)
  jal x1, store_regs
  //TODO: handle interrupts here
  j end_except
  # la x1, end_except
  # jal x0, external_interrupt_signal_handler_c


default_exc_handler:  
  j default_exc_handler # To infinite loop
  
/* =================================================== [ exceptions ] === */
/* This section has to be down here, since we have to disable rvc for it  */

  .section .vectors, "ax"
  .option norvc;

  .org 0x00
  jal x0, reset_handler
  .org 0x04
  jal x0, instruction_address_misaligned_handler
  .org 0x08
  jal x0, default_exc_handler
  .org 0x0C
  jal x0, illegal_insn_handler
  .org 0x10
  .rept 5

   # Not implemented handlers are substituted with default one

  jal x0, default_exc_handler   
          # reserved[0x10]
          # load_address_misaligned_handler       [0x14] 
          # load_access_fault_handler             [0x18]
          # store_address_misaligned_handler      [0x1C]
          # store_access_fault_handler            [0x20]
  .endr
  .org 0x24
  jal x0, ecall_u_handler
  .org 0x28
  .rept 35

   # Not implemented handlers are substituted with default one

  jal x0, default_exc_handler
          # ecall_s_handler                       [0x28]
          # reserved                              [0x2C] 
          # # ecall_m_handler                     [0x30]
          # reserved                              [0x34-0x80]

          # user_software_interrupt_handler       [0x84]
          # supervisor_software_interrupt_handler [0x88]
          # reserved                              [0x8C]
          # machine_software_interrupt_handler    [0x90]

          # user_timer_interrupt_handler          [0x94]
          # supervisor_timer_interrupt_handler    [0x98]
          # reserved                              [0x9C]
          # machine_timer_interrupt_handler       [0xA0]

          # user_external_interrupt_handler       [0xA4]
          # supervisor_external_interrupt_handler [0xA8]
          # reserved                              [0xAC]
          # machine_external_interrupt_handler    [0xB0]
          
  .endr
  .org 0xB4
  jal x0, default_exc_handler
  .org 0xB8
  .rept 3

  # Not implemented handlers are substituted with default one

  jal x0, default_exc_handler
         # reserved                               [0xB8]
         # reserved                               [0xBC]
         # reserved                               [0xC0]
  .endr
  .org 0xC4
  jal x0, external_interrupt_signal_handler
  .org 0xC8
  jal x0, external_interrupt_signal_handler
  .org 0xCC
  jal x0, external_interrupt_signal_handler
  .org 0xD0
  jal x0, external_interrupt_signal_handler

  .org 0xD4
  jal x0, external_interrupt_signal_handler
  .org 0xD8
  jal x0, external_interrupt_signal_handler
  .org 0xDC
  jal x0, external_interrupt_signal_handler
  .org 0xE0
  jal x0, external_interrupt_signal_handler

  .org 0xE4
  jal x0, external_interrupt_signal_handler
  .org 0xE8
  jal x0, external_interrupt_signal_handler
  .org 0xEC
  jal x0, external_interrupt_signal_handler
  .org 0xF0
  jal x0, external_interrupt_signal_handler

  .org 0xF4
  jal x0, external_interrupt_signal_handler
  .org 0xF8
  jal x0, external_interrupt_signal_handler
  .org 0xFC
  jal x0, external_interrupt_signal_handler
  .org 0x100
  jal x0, external_interrupt_signal_handler



  .section .rodata


config_mem_words:
  .word 0x01010101
  .word 0x02020202
  .word 0x03030303
  .word 0x04040404
  .word 0x05050505
  .word 0x06060606
  .word 0x07070707
  .word 0x08080808
  .word 0x09090909
  .word 0x0A0A0A0A





